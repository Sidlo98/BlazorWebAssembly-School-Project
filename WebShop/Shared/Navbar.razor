<nav class="navbar navbar-expand-lg navbar-light bg-light p-4">
  <div class="container-fluid">
    <NavLink class="navbar-brand active" href="/" Match="NavLinkMatch.All">
        <i class="fas fa-tv"></i>
        TechStore
    </NavLink>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse justify-content-between" id="navbarNavAltMarkup">
      <div class="navbar-nav">
        <NavLink class="nav-link" href="products">Products</NavLink>
        <NavLink class="nav-link" href="add">Add Products</NavLink>
        @if (user())
        {
         <button @onclick="() => Logout()" class="btn btn-small btn-primary">Logout</button>
        }
        else
        {
        <NavLink class="nav-link" href="login">Log In</NavLink>
        }
      </div>
      <div class="navbar-nav">
                    <NavLink href="checkout" class="navbar-link">
                    <button class="btn btn-sm position-relative">
                        <i class="fas fa-shopping-cart"></i>
                        @if (GetProductCount() != 0)
                        {
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @GetProductCount()
                            </span>         
                        }
                    </button>
                    </NavLink>
      </div>
    </div>
  </div>
</nav>

@code {
    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
        UserService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
        UserService.OnChange += StateHasChanged;
    }

    private int GetProductCount()
    {
        var cart = LocalStorage.GetItem<List<CartItem>>("cart");
        var q = 0;
        foreach(var item in cart)
        {
            q = q + item.quantity;
        }
        return q;
    }

    private bool user()
    {
        var user = LocalStorage.GetItem<User>("user");

        if(user == null)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private async Task Logout()
    {
       await UserService.Logout();
    }

}
