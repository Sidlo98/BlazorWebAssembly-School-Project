@page "/checkout"
    <div class="container mt-5 min-height">
      <div class="row">

          @if(CartItems().Count > 0)
          {
            foreach(var item in CartItems())
            {
            <div class="col-12 mb-2">
                <div class="card d-flex p-3 flex-row justify-content-between">
                <p class="h3">@item.product.Name x @item.quantity x @item.product.Price kr</p>

                <div class="btn-group btn-group-lg">
                    <button type="button" class="btn btn-primary" @onclick="() => AddOne(item.product)">+</button>
                    <button type="button" class="btn btn-primary"  @onclick="() => RemoveOne(item.product)">-</button>
                </div>
                </div>
            </div>
            }
          }
          else
          {
            <div class="col-12 mb-2">
                <div class="card d-flex p-3 text-center">
                    <p class="h3">Cart Is Empty</p>
                </div>
            </div>
          }

        <div class="col-12 mb-2">
          <div class="card d-flex p-3 flex-row justify-content-between align-items-center">
            <div>
              <p class="h3">Totalt: @TotalPrice() kr</p>
              <span class="text-muted">inc. tax</span>
            </div>
               <p>@status</p>
                @if (user())
                {
                    <button @onclick="() => MakeOrder()" type="button" class="btn btn-primary">Confirm Order</button>
                }
                else
                {   
                    <div class="d-flex flex-column align-items-center">
                    <p>You must log in to make an order</p>
                    <NavLink href="login">
                       <button type="button" class="btn btn-primary d-block">Login</button>
                    </NavLink>
                    </div>
                }
          </div>
          
        </div>
      </div>
    </div>

@code 
{
    private string status = "";

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
        UserService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
        UserService.OnChange += StateHasChanged;
    }

    private List<CartItem> CartItems()
    {   
        return LocalStorage.GetItem<List<CartItem>>("cart");
    }

    private async Task AddOne(Product product)
    {
        await CartService.AddToCart(product);
    }
    private async Task RemoveOne(Product product)
    {
        await CartService.RemoveFromCart(product);
    }

    private int TotalPrice()
    {
        var TotalPrice = 0;

        var cart = LocalStorage.GetItem<List<CartItem>>("cart");

        foreach(var item in cart)
        {
            TotalPrice = TotalPrice + item.product.Price * item.quantity;
        }

        return TotalPrice;

    }

    private bool user()
    {
        var user = LocalStorage.GetItem<User>("user");

        if(user == null)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private async Task MakeOrder()
    {
        status = "";
        var cartItems = LocalStorage.GetItem<List<CartItem>>("cart");
        var user = LocalStorage.GetItem<User>("user");

        if(cartItems.Count == 0)
        {
            status = "Your cart is empty";
        }
        else
        {
            var orderLines = new List<OrderLine>();
            foreach(var item in cartItems)
            {
                orderLines.Add(new OrderLine()
                    {
                        ProductId = item.product.Id,
                        Quantity = item.quantity
                    });
            }
            var order = new Order()
            {
                UserId = user.Id,
                Status = "Recived",
                OrderLines = orderLines
            };
            var response = await Http.PostAsJsonAsync("https://localhost:44332/api/orders", order);
            if (response.IsSuccessStatusCode)
            {
                await CartService.EmptyCart();
                status = "Your order was created";
            }
        }  
    }
}